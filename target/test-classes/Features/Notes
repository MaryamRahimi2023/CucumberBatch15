if we make any changes anything in here will be error rather then that we should add out changes copy and pasted
in Login class in to that method and replace it with the old statement in " ".

-Created Maven Project
-Added below dependencies in pom.xml
   -Selenium
   -Cucumber-java
   -Cucumber-junit

  -Created components of cucumber
  -feature file [Login.feature]
  -StepDefinition[Login.java]
  -Runner[SmokeRunner.java]

if we enter a wrong username or password to check the functionality of the page and this step did not pass the next step
will not be executed and the driver will be open not closed since it is not a good practise and we need to close the driver we need hooks.

HOOKS: In Cucumber, the hook is the block of code which can be defined with each scenario
       For defining Pre and Post steps (opening and closing the browsers) in any Cucumber framework.
       This is always created inside the StepDefinitions folder.

The ways we can use data in our codes.

1.Hard code
2.property file
3.regular expression in " " double code like "admin" and "password"
4.scenario outline

    1. Parameterization allows you to pass values into your tests at runtime, rather than hardcoding them into the code itself.
    This makes your tests more flexible and less brittle, as you can modify the values without having to modify the code.

    2. Data Driven is when we use any excel sheet to fitch data or from any other external source into our code.
#HOOKS: For defining pre and Post steps in any Cucumber framework
    #     : This is always created inside the StepDefinitions folder
    #     : Hooks will take care of pre and post conditions irrespective
    #     : of what goes in between the test steps

    #BACKGROUND: Its the clubbing of common steps in different scenarios of a feature file
   #             till flow is not broken
   #1. Hard Code
   #2. Config file or properties is used when we need to test for lots of data

   #-----------------Cucumber itself provides multiple option through which we can feed data from
   # feature file into Step Definition---------------------------------------------
   #3. Regular (cucumber) Expressions ( we can use this for limited set data for testing)
       # put the data in double quotes [""]
   #4. Scenario outline Provides you an alternative to data driven testing
   (means storing file in an excel sheet and fetch it) so scenario outline is another way of data driven
   used for multiple set data like add multiple employees
       # Also supports parametrization and dta driven testing too
       browser open and close for every test
   #5.data table  same performance just only one time the browser will lunch performs the actions and close
   and this is coz of java code
   login with multiple credentials using data table
   we need to find other elements to go back and start again (coding needs map)

  #===================================PARAMETERIZATION================================
  # Executing the same test case with multiple set data is parameterization
  in testNG data provider will work as a parameterization

  data driven framework is incorrect it is just for storing and fetching data not a framework , framework comes with lots of other facilities


  rules to use scenario outline

  # if you want to use parameterization
  # if you wish to implement data driven testing
  # scenario outline is always used along with the keyword example

  target folder is where the reports will be stored

 https://mvnrepository.com/ Maven dependencies center which will be needed for our projects
 apache.poi and apoi-ooxml dependencies are used to handling the files in our project
 commons-io is used for screenshot and saving screenshot in the other folders
 To handle large amount of data . Or data shared by Database team and we need to run our scripts . We choose ExcelShee
 These jars/ brings classes with it which we want to utilize in our project

Maven is a build automation tool means everything is build easy to use like single runner class

// MAVEN LIFE CYCLE: This consists of several phase
    // clean: Removes all the files generated by the previous build
    // validate: Checks the project is correct and all the necessary information is available
    // compile: compiles the source code of the project
    // test: runs the tests for the project
    // package: packages the compiled code into a distributable format, such as JAR or WAR files
    // verify: runs and checks on results of integration tests to ensure quality criteria is met
    // install: installs the packages into local repository
    // site: generates documentation for the project
    // deploy: copies the final package to remote repository for sharing with other developers or projects
Maven lifecycle:
Install create the .m2 folder which contains the dependencies in our system-->C:\Users\Maryam Rahimi\.m2\repository